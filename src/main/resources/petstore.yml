openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
servers:
  - url: http://localhost:8080/
paths:
  /dogs:
    get:
      summary: get a dog
      operationId: getDog
      tags:
        - dog
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dog"
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - pets
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: patches
      operationId: patchPet
      tags:
        - pets
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MixedData"
            examples:
              cat:
                value:
                  animal:
                    refType: "Cat"
                    hunts: true
                    age: 2
                  name: "Jerry"
              dog:
                value:
                  animal:
                    refType: "Dog"
                    bark: true
                    breed: "Dingo"
                  name: "Hasso"
      responses:
        '200':
          description: Updated
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Pets:
      type: array
      items:
        $ref: "#/components/schemas/Pet"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Dog:
      required:
        - refType
      type: object
      properties:
        bark:
          type: boolean
        breed:
          type: string
          enum: [ Dingo, Husky, Retriever, Shepherd ]
        refType:
          type: string
          description: Use Dog
          default: Dog
    Cat:
      required:
        - refType
      type: object
      properties:
        hunts:
          type: boolean
        age:
          type: integer
        refType:
          type: string
          description: Use Cat
          default: Cat
    MixedData:
      type: object
      required:
        - animal
      properties:
        animal:
          type: object
          oneOf:
            - $ref: '#/components/schemas/Cat'
            - $ref: '#/components/schemas/Dog'
          discriminator:
            propertyName: refType
        name:
          type: string